@model PJPEntry.Add

@section style{
    @Html.IncludeVersionedCss(Url.Content("../assets/design/plugins/fileupload/css/fileupload.css"))

}

@{

    if (Model.BrandEntryList == null || Model.BrandEntryList.Count == 0)
    {
        List<PJPEntry_Brand.List> bList = new List<PJPEntry_Brand.List>();
        bList.Add(new PJPEntry_Brand.List());
        Model.BrandEntryList = bList;
    }

}
<div class="table-section">

    <div class="page-header">
        <div class="page-leftheader">
            <h4 class="page-title">PJP Entry</h4>
        </div>

    </div>

    @using (Ajax.BeginForm("PJPEntryAdd", "Transaction",
            new { src = ViewBag.src },
             new AjaxOptions { HttpMethod = "POST", OnSuccess = "OnSuccess", OnBegin = "ShowLoadingDialog()" },
                new { @id = "PJPEntryAddForm", @enctype = "multipart/form-data" })
        )
    {
        <div class="row">
            <div class="col-lg-12 ">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">SSR Details </h3>
                    </div>
                    <div class="card-body pb-2">
                        <div class="row">
                            <div class="col-lg-6 col-md-6 col-sm-6 col-12 form-group">
                                <label>SSR </label>
                                @Html.HiddenFor(model => model.SSR_AttendenceID)
                                
                                @Html.DropDownListFor(n => n.SSR_EMPID, new SelectList(Model.SSRList, "ID", "Name", Model.SSR_EMPID), "Select",
         new { @class = "form-control  applyselect", @onchange = "GoSSR(this)" })
                                @Html.ValidationMessageFor(model => model.SSR_EMPID, "", new { @class = "text-danger" })

                            </div>

                            <div class="col-lg-6 col-md-6 col-sm-6 col-12 form-group">
                                <label>SSR Availability on Location  </label>
                                <select name="@Html.NameFor(x => x.SSRAvailability)" class="applyselect form-control">
                                    <option value="">Select</option>
                                    <option @(Model.SSRAvailability == "Present" ? "selected" : "") value="Present">Present</option>
                                    <option @(Model.SSRAvailability == "Absent" ? "selected" : "") value="Absent">Absent</option>
                                </select>
                                @Html.ValidationMessageFor(model => model.SSRAvailability, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-lg-4 col-md-4 col-sm-4 col-12 form-group">
                                <label>SSR Code<sup>*</sup></label>
                                <p>@Model.SSR_Code</p>
                            </div>
                            <div class="col-lg-4 col-md-4 col-sm-4 col-12 form-group">
                                <label>SSR Name<sup>*</sup></label>
                                <p>@Model.SSR_Name</p>
                            </div>
                            <div class="col-lg-4 col-md-4 col-sm-4 col-12 form-group">
                                <label>Attendence Punched by SSSR </label>
                                <p>@Model.AttPunchedBySSR</p>
                            </div>

                            <div class="col-lg-6 form-group" style="display:none;">
                                <label>Location  <sup>*</sup></label>
                                @Html.TextBoxFor(model => model.Location, new { @class = "form-control", @readonly = "readonly" })
                                @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                                @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })

                                @Html.HiddenFor(model => model.Latitude)
                                @Html.HiddenFor(model => model.Longitude)
                                @Html.HiddenFor(model => model.Error)


                            </div>

                            <div class="col-lg-9 col-md-9 col-sm-9 col-12 form-group textareapjp">
                                <label>Note </label>
                                @Html.TextAreaFor(model => model.Notes, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-3 col-12 form-group camerabtn">
                                <a title="click here for open camera" onclick="OpenCamera(this)" style="color: #fff">
                                    <i class="fa fa-camera" aria-hidden="true"></i>
                                </a>

                                <img class="img-responsive" src="~/assets/design/images/NoImage.jpg" />
                                @Html.HiddenFor(model => model.ImageBase64String, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ImageBase64String, "", new { @class = "text-danger" })

                            </div>


                        </div>

                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Performance Rating</h3>
                    </div>
                    <div class="card-body pb-2">
                        <div class="row starmain">
                            <div class="col-lg-6 col-md-6 col-sm-6 col-12 form-group">
                                <label class="starhead">Product Knowledege </label>
                                <div class="rate">
                                    <input type="radio" onclick="FillProductstar(this)" id="pstar5" name="prate" value="5" />
                                    <label for="pstar5" title="text">5 stars</label>
                                    <input type="radio" onclick="FillProductstar(this)" id="pstar4" name="prate" value="4" />
                                    <label for="pstar4" title="text">4 stars</label>
                                    <input type="radio" onclick="FillProductstar(this)" id="pstar3" name="prate" value="3" />
                                    <label for="pstar3" title="text">3 stars</label>
                                    <input type="radio" onclick="FillProductstar(this)" id="pstar2" name="prate" value="2" />
                                    <label for="pstar2" title="text">2 stars</label>
                                    <input type="radio" onclick="FillProductstar(this)" id="pstar1" name="prate" value="1" />
                                    <label for="pstar1" title="text">1 star</label>
                                </div>
                                @Html.TextAreaFor(model => model.ProductKnw, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ProductKnw, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.ProductRating)
                                @Html.ValidationMessageFor(model => model.ProductRating, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-lg-6 col-md-6 col-sm-6 col-12 form-group">
                                <label class="starhead">Customer Dealing </label>
                                <div class="rate">
                                    <input type="radio" onclick="FillCustomerstar(this)" id="cstar5" name="crate" value="5" />
                                    <label for="cstar5" title="text">5 stars</label>
                                    <input type="radio" onclick="FillCustomerstar(this)" id="cstar4" name="crate" value="4" />
                                    <label for="cstar4" title="text">4 stars</label>
                                    <input type="radio" onclick="FillCustomerstar(this)" id="cstar3" name="crate" value="3" />
                                    <label for="cstar3" title="text">3 stars</label>
                                    <input type="radio" onclick="FillCustomerstar(this)" id="cstar2" name="crate" value="2" />
                                    <label for="cstar2" title="text">2 stars</label>
                                    <input type="radio" onclick="FillCustomerstar(this)" id="cstar1" name="crate" value="1" />
                                    <label for="cstar1" title="text">1 star</label>
                                </div>
                                @Html.TextAreaFor(model => model.CustomerKnw, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.CustomerKnw, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.CustomerRating)
                                @Html.ValidationMessageFor(model => model.CustomerRating, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Expense Details</h3>
                    </div>
                    <div class="card-body pb-2">
                        <div class="row">
                            <div class="col-lg-2 col-md-2 col-sm-2 col-12 form-group textareapjp">
                                <label>Amount </label>
                                @Html.TextBoxFor(model => model.ExpenseAmt, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ExpenseAmt, "", new { @class = "text-danger" })
                            </div>

                            <div class="col-lg-7 col-md-7 col-sm-7 col-12 form-group textareapjp">
                                <label>Remarks </label>
                                @Html.TextAreaFor(model => model.ExpenseRemarks, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ExpenseRemarks, "", new { @class = "text-danger" })
                            </div>

                            <div class="col-lg-3 col-md-3 col-sm-3 col-12 form-group camerabtn">
                                @Html.HiddenFor(x => x.ExpenseAttachmentID)
                                @Html.TextBoxFor(x => x.ExpenseUpload, new { @class = "dropify", @type = "file", @accept = "image/jpeg,image/png,image/jpg,jpeg|png|jpg" })
                                @Html.ValidationMessageFor(model => model.ExpenseUpload, "", new { @class = "text-danger" })

                                @if (Model.ExpenseAttachmentID > 0)
                                {
                                    <img class="mx-auto img-responsive avatar-crop" alt="img" src="@Model.ExpenseAttachmentPath?V=@DateTime.Now.ToString("mm:ss")">
                                }

                            </div>
                        </div>
                    </div>
                </div>
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Competitor Entry</h3>
                    </div>
                    <div class="card-body pb-2">
                        <div class="row row-sm">
                            <div class="col-md-12 col-12">
                                <div class="table-responsive">
                                    <table id="tableBrand" cellpadding="1" cellspacing="1" class="table table-bordered table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th width="100">Sr. No.</th>
                                                <th>Brand</th>
                                                <th width="100">Qty</th>
                                                <th width="300">Upload</th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (Model.BrandEntryList != null)
                                            {
                                                int Count = 0;
                                                for (int i = 0; i < Model.BrandEntryList.Count; i++)
                                                {
                                                    Count++;
                                                    <tr>
                                                        <td>
                                                            <label id="lbl_@Count"> @Count</label>
                                                            @Html.HiddenFor(model => Model.BrandEntryList[i].PJPBrandID, new { @class = "hdnID" })
                                                            @Html.HiddenFor(model => Model.BrandEntryList[i].AttachID)
                                                            @Html.HiddenFor(model => Model.BrandEntryList[i].BrandName, new { @class = "hdnName" })
                                                        </td>
                                                        <td>
                                                            @Html.DropDownListFor(n => Model.BrandEntryList[i].BrandID, new SelectList(Model.BrandList, "ID", "Name", Model.BrandEntryList[i].BrandID), "Select", new { @class = "form-control  applyselect" })
                                                            @Html.ValidationMessageFor(model => Model.BrandEntryList[i].BrandID, "", new { @class = "text-danger" })
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(model => Model.BrandEntryList[i].Qty, new { @class = "form-control" })
                                                            @Html.ValidationMessageFor(model => Model.BrandEntryList[i].Qty, "", new { @class = "text-danger" })
                                                        </td>
                                                        <td>
                                                            <div class="col-lg-12 form-group camerabtn">
                                                                <a title="click here for open camera" onclick="OpenCamera(this,'back')" style="color: #fff">
                                                                    <i class="fa fa-camera" aria-hidden="true"></i>
                                                                </a>
                                                                <input type="hidden" id="@Html.IdFor(x=>Model.BrandEntryList[i].ImageBase64String)" name="@Html.NameFor(x=>Model.BrandEntryList[i].ImageBase64String)" value="" />
                                                                <img class="img-responsive" src="~/assets/design/images/NoImage.jpg" />
                                                            </div>

                                                        </td>
                                                        <td>
                                                            @if (Count == 1)
                                                            {


                                                                <a class="remove"><i class="fa fa-window-close" aria-hidden="true"></i></a>
                                                            }
                                                            else
                                                            {
                                                                <a onclick="DeleteRow(this)" class="remove"><i class="fa fa-window-close red-clr" aria-hidden="true"></i></a>
                                                            }

                                                        </td>
                                                    </tr>
                                                }

                                            }
                                        </tbody>
                                    </table>
                                    <div class="text-right">
                                        <a onclick="AddNewRow(this)" class="btn btn-indigo">Add Row</a>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12 form-group">

                        @if ((Model.PJPEntryID ?? 0) == 0)
                        {
                            <a onclick="getLocation();" class="btn btn-indigo">Refresh Location</a>
                            <button type="submit" class="btn btn-indigo" name="Command" value="Add"><i class="fa fa-paper-plane" aria-hidden="true"></i> Update</button>
                        }
                        <a href="@Url.Action("PlanWisePJPEntryList",new { src = ClsCommon.Encrypt(ViewBag.MenuID+"*"+"/Transaction/PlanWisePJPEntryList*"+Model.PJPPlanID+"*0*0") })" type="button" class="btn btn-sm  close-btn">cancel</a>

                    </div>
                </div>
            </div>
        </div>
    }

</div>
    @section scripts    {
        @System.Web.Optimization.Scripts.Render("~/bundle/unobtrusivejs")
        @Html.IncludeVersionedJs(Url.Content("/assets/design/plugins/fileupload/js/dropify.js"))
        @Html.IncludeVersionedJs(Url.Content("/assets/design/js/filupload.js"))
        <script>
        function FillProductstar(obj) {
            var a = $(obj).val();
            $("#ProductRating").val(a);
        }
        function FillCustomerstar(obj) {
            var a = $(obj).val();
            $("#CustomerRating").val(a);
        }
        function GoSSR(obj) {
            var PJPPlanID = '@ViewBag.PJPPlanID';
            var PJPEntryID = '@ViewBag.PJPEntryID';
            var SSRTourPlanID = $(obj).find("option:selected").val();
            if (!SSRTourPlanID) {
                SSRTourPlanID = 0;
            }
            var URL = "/Transaction/PJPEntryAdd";
            var src = "src="+EncryptJSON(@ViewBag.MenuID+"*" + "/Transaction/PJPEntryAdd*" + PJPPlanID + "*" + PJPEntryID + "*" + SSRTourPlanID)
            window.location.href = URL + "?" + src;
        }

        $(document).ready(function () {

                getLocation();

        });

        function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition, showError);
        } else {
            FailToaster("Geolocation is not supported by this browser.");

        }
    }
        function showPosition(position) {
            $("#Latitude").val(position.coords.latitude);
            $("#Longitude").val(position.coords.longitude);
            $("#Location").val($("#Latitude").val() + "," + $("#Longitude").val());
        }

        function showError(error) {
            var Message = "";
            switch (error.code) {
                case error.PERMISSION_DENIED:
                    Message = "User denied the request for Geolocation.";;
                    break;
                case error.POSITION_UNAVAILABLE:
                    Message = "Location information is unavailable.";
                    break;
                case error.TIMEOUT:
                    Message = "The request to get user location timed out.";
                    break;
                case error.UNKNOWN_ERROR:
                    Message = "An unknown error occurred.";
                    break;
            }
            $("#Error").val(Message);
            $("#WarningText").empty();
            $("#WarningText").html(Message);
            $('#MarkAttendenceModal').modal('hide');
            $('#WarningModal').modal({
                backdrop: 'static',
                keyboard: false
            })

        }


        function DeleteBrandEntry(obj) {
            var hdnID = $(obj).closest('tr').find('.hdnID').val();
            var hdnName = $(obj).closest('tr').find('.hdnName').val();
            var Msg = 'Are you sure want to delete ' + hdnName + ' ?';
            ConfirmMsgBox(Msg, '', function () {
                if (hdnID) {
                    var myobj = DelRecordJson(hdnID, 'PJPBrandEntry');
                    if (!myobj.Status) {
                        FailToaster(myobj.SuccessMessage);

                    } else {
                        SuccessToaster(myobj.SuccessMessage);

                        DeleteRow(obj)
                    }
                }
            });

        }



        // add new Row
        function AddNewRow() {
            var LastTRCount = parseInt($('#tableBrand').find("tbody tr").length) - 1;
            $('.applyselect').select2("destroy");
            var $tableBody = $('#tableBrand').find("tbody"),
                $trLast = $tableBody.find("tr:last"),
                $trNew = $trLast.clone();
            $trNew.find("td:last").html('<a onclick="DeleteRow(this)" class="remove" data-toggle="tooltip" data-original-title="Remove"><i class="fa fa-window-close red-clr" aria-hidden="true"></i></a>');


            $trNew.find("label").each(function () {
                $(this).attr({
                    'id': function (_, id) { var arr = id.split('_'); return id.replace(arr[1], LastTRCount + 1); },
                });
                $(this).html(parseInt($('#tableBrand').find("tbody tr").length) + 1);
            });

            $trNew.find("input").each(function (i) {
                $(this).attr({
                    'id': function (_, name) { return name.replace('_' + LastTRCount + '_', '_' + (parseInt(LastTRCount) + 1) + '_'); },
                    'name': function (_, name) { return name.replace('[' + LastTRCount + ']', '[' + (parseInt(LastTRCount) + 1) + ']'); },
                });

            });

            $trNew.find("select").each(function (i) {
                $(this).attr({
                    'id': function (_, name) { return name.replace('_' + LastTRCount + '_', '_' + (parseInt(LastTRCount) + 1) + '_'); },
                    'name': function (_, name) { return name.replace('[' + LastTRCount + ']', '[' + (parseInt(LastTRCount) + 1) + ']'); },
                });
                $(this).val('');
            });

            $trNew.find("span").each(function (i) {
                if ($(this).attr("data-valmsg-for")) {
                    $(this).attr({
                        'data-valmsg-for': function (_, name) { return name.replace('[' + LastTRCount + ']', '[' + (parseInt(LastTRCount) + 1) + ']'); }
                    });
                }
                if ($(this).attr("for")) {
                    $(this).attr({
                        'for': function (_, name) { return name.replace('_' + LastTRCount + '_', '_' + (parseInt(LastTRCount) + 1) + '_'); }
                    });
                }
            });

            $trLast.after($trNew);
            var form = $("#PJPEntryAddForm").closest("form");
            form.removeData('validator');
            form.removeData('unobtrusiveValidation');
            $.validator.unobtrusive.parse(form);
            $(".applyselect").select2();
        }


        function DeleteRow(obj) {
            var count = 0;
            var TotalRowCount = $('#tableBrand').find("tbody tr").length;
            ConfirmMsgBox("Are you sure want to delete", '', function () {

                $(obj).closest('tr').remove();
                $("#tableBrand TBODY TR").each(function (i) {
                    $(this).closest("tr").find("label").each(function () {
                        $(this).attr({
                            'id': function (_, id) { var arr = id.split('_'); return id.replace(arr[1], i); },
                        });
                        $(this).html(i + 1)
                    });


                    $(this).closest("tr").find("input").each(function () {
                        $(this).attr({
                            'id': function (_, id) { return id.replace('_' + (parseInt(i) + 1) + '_', '_' + i + '_'); },
                            'name': function (_, name) { return name.replace('[' + (parseInt(i) + 1) + ']', '[' + i + ']'); },
                        });

                    });

                    $(this).closest("tr").find("select").each(function () {
                        $(this).attr({
                            'id': function (_, id) { return id.replace('_' + (parseInt(i) + 1) + '_', '_' + i + '_'); },
                            'name': function (_, name) { return name.replace('[' + (parseInt(i) + 1) + ']', '[' + i + ']'); },
                        });

                    });



                    $(this).closest("tr").find("span").each(function () {
                        if ($(this).attr("data-valmsg-for")) {
                            $(this).attr({
                                'data-valmsg-for': function (_, name) { return name.replace('[' + (parseInt(i) + 1) + ']', '[' + i + ']'); },
                            });
                        }
                        if ($(this).attr("for")) {
                            $(this).attr({
                                'for': function (_, id) { return id.replace('_' + (parseInt(i) + 1) + '_', '_' + i + '_'); },
                            });
                        }
                    });
                });
                var form = $("#PJPEntryAddForm").closest("form");
                form.removeData('validator');
                form.removeData('unobtrusiveValidation');
                $.validator.unobtrusive.parse(form);

            })
        }

        function OnSuccess(obj) {
            if (obj.Status) {
                SuccessToaster(obj.SuccessMessage);
                window.location.href = obj.RedirectURL;
            }
            else {
                CloseLoadingDialog();
                FailToaster(obj.SuccessMessage);

            }
        }

        </script>
    }
